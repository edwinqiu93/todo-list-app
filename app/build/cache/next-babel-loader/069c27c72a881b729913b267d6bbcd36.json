{"ast":null,"code":"var _dec, _class;\n\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nimport ReactModal from \"react-modal\";\nimport { connect } from \"react-redux\";\nimport { action } from \"modules\";\nReactModal.setAppElement(\"body\");\nlet Modal = (_dec = connect( // mapStateToProps\nstate => ({\n  show: state.modal.show,\n  tag: state.modal.tag,\n  payload: state.modal.payload\n}), // mapDispatchToProps\ndispatch => ({\n  close: () => dispatch(action.modal.close())\n})), _dec(_class = class Modal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modals: {}\n    };\n  }\n\n  async componentDidMount() {\n    const modals = await import(\"../../modal\");\n    this.setState({\n      modals: modals\n    });\n  }\n\n  render() {\n    const {\n      modals\n    } = this.state;\n    const {\n      show,\n      tag,\n      payload,\n      close\n    } = this.props;\n    let Modal = modals[tag];\n    if (!Modal) return __jsx(React.Fragment, null);\n    return __jsx(ReactModal, {\n      isOpen: show,\n      className: \"modal-container\",\n      overlayClassName: \"modal-backdrop\",\n      closeTimeoutMS: 200\n    }, __jsx(Modal, _extends({}, payload, {\n      close: close\n    })));\n  }\n\n}) || _class);\nexport default Modal;","map":null,"metadata":{},"sourceType":"module"}