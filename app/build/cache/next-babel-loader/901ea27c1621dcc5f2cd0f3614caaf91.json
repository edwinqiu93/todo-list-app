{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport createReducer from \"utils/createReducer\";\n\nconst getInitState = () => ({\n  images: [],\n  show: false,\n  index: 0\n});\n\nconst initState = getInitState();\nconst actionHandlers = {\n  OPEN_REACT_IMAGES: (state, action) => {\n    const result = _objectSpread({}, state);\n\n    const {\n      images,\n      index = 0\n    } = action.payload;\n    result.show = true;\n    result.images = images;\n    result.index = index;\n    return result;\n  },\n  CLOSE_REACT_IMAGES: () => getInitState()\n};\nexport default createReducer(initState, actionHandlers);","map":null,"metadata":{},"sourceType":"module"}