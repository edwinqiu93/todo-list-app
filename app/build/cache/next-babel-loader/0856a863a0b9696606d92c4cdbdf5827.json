{"ast":null,"code":"var _dec, _class;\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport Panel from \"components/Panel\";\nimport Button from \"components/Button\";\nimport objectPath from \"object-path\";\nimport * as api from \"api\";\nimport _ from \"lodash\";\nimport noop from \"lodash/noop\";\nimport { connect } from \"react-redux\";\nimport { action } from \"../../modules\";\nimport moment from \"moment\";\nimport \"moment-timezone\";\n\nconst mapDispatchToProps = dispatch => ({\n  openDelete: payload => dispatch(action.modal.open(\"DELETETASK\", payload))\n});\n\nlet Dashboard = (_dec = connect(null, mapDispatchToProps), _dec(_class = class Dashboard extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      loaded: false,\n      loading: false,\n      data: [],\n      payload: this.getInitialPayload()\n    });\n\n    _defineProperty(this, \"handleChange\", path => value => {\n      const state = _objectSpread({}, this.state);\n\n      objectPath.set(state, path, value);\n      this.setState(state);\n    });\n\n    _defineProperty(this, \"componentDidMount\", async () => {\n      try {\n        this.setState({\n          loading: true\n        });\n        let data = await api.tasks.getAllTasks();\n        this.setState({\n          loaded: true,\n          loading: false,\n          data\n        });\n      } catch (error) {\n        var _error$response$data, _error$response;\n\n        console.error(error);\n        window.alert((_error$response$data = (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) !== null && _error$response$data !== void 0 ? _error$response$data : error.message);\n        this.setState({\n          loading: false\n        });\n      }\n    });\n\n    _defineProperty(this, \"createTask\", async () => {\n      let {\n        task_title\n      } = this.state.payload;\n\n      if (!task_title) {\n        return window.alert(\"Please fill in a Task Title and Resubmit.\");\n      }\n\n      try {\n        this.setState({\n          loading: true\n        });\n        let returnedItem = await api.tasks.createTask(this.state.payload);\n        this.setState({\n          loading: false,\n          data: [...this.state.data, returnedItem],\n          payload: this.getInitialPayload()\n        });\n      } catch (error) {\n        var _error$response$data2, _error$response2;\n\n        console.error(error);\n        window.alert((_error$response$data2 = (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) !== null && _error$response$data2 !== void 0 ? _error$response$data2 : error.message);\n        this.setState({\n          loading: false\n        });\n      }\n    });\n\n    _defineProperty(this, \"updateComplete\", async id => {\n      try {\n        this.setState({\n          loading: true\n        });\n        let returnedItem = await api.tasks.updateTask(id);\n        this.setState({\n          loading: false,\n          data: this.state.data.map(task => task.task_id == returnedItem.task_id ? returnedItem : task)\n        });\n      } catch (error) {\n        var _error$response$data3, _error$response3;\n\n        console.error(error);\n        window.alert((_error$response$data3 = (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) !== null && _error$response$data3 !== void 0 ? _error$response$data3 : error.message);\n        this.setState({\n          loading: false\n        });\n      }\n    });\n  }\n\n  getInitialPayload() {\n    return {\n      task_title: \"\",\n      task_description: \"\",\n      due_date: \"\",\n      completed: \"N\"\n    };\n  }\n\n  render() {\n    const {\n      loading,\n      loaded,\n      payload,\n      data\n    } = this.state;\n    return __jsx(\"div\", {\n      className: \"container-fluid\",\n      id: \"dashboard_top\",\n      style: {\n        paddingBottom: \"2rem\",\n        maxWidth: \"1300px\"\n      }\n    }, __jsx(Panel, {\n      border: \"primary\",\n      loading: loading,\n      title: \"Create Task\",\n      className: \"panel__Centered\",\n      icon: \"fa fa-plus-circle\",\n      footer: __jsx(\"div\", {\n        className: \"text-right\"\n      }, __jsx(Button, {\n        type: \"default\",\n        icon: \"fa fa-trash\",\n        title: \"Clear\",\n        onClick: () => this.setState({\n          payload: this.getInitialPayload()\n        }),\n        disabled: loading,\n        size: \"sm\"\n      }), __jsx(Button, {\n        type: \"success\",\n        icon: \"fa fa-search\",\n        className: \"margin-left-12\",\n        title: \"Create Task\",\n        onClick: this.createTask,\n        disabled: loading,\n        size: \"sm\"\n      }))\n    }, __jsx(\"div\", {\n      className: \"row\"\n    }, __jsx(\"div\", {\n      className: \"col-sm-6\"\n    }, __jsx(\"div\", {\n      className: \"form-group\"\n    }, __jsx(\"label\", null, \" Task Title \", __jsx(\"span\", {\n      className: \"meta-red\"\n    }, \"Required\")), __jsx(\"input\", {\n      className: \"form-control\",\n      placeholder: \"\",\n      value: payload.task_title,\n      onChange: event => this.handleChange(\"payload.task_title\")(event.target.value),\n      required: true\n    }))), __jsx(\"div\", {\n      className: \"col-sm-6\"\n    }, __jsx(\"div\", {\n      className: \"form-group\"\n    }, __jsx(\"label\", null, \" Due Date \"), __jsx(\"input\", {\n      className: \"form-control\",\n      type: \"datetime-local\",\n      value: payload.due_date,\n      onChange: event => this.handleChange(\"payload.due_date\")(event.target.value)\n    })))), __jsx(\"div\", {\n      className: \"row\"\n    }, __jsx(\"div\", {\n      className: \"col-sm-12\"\n    }, __jsx(\"div\", {\n      className: \"form-group\"\n    }, __jsx(\"label\", null, \"Description\"), __jsx(\"textarea\", {\n      className: \"form-control\",\n      placeholder: \"\",\n      rows: \"2\",\n      value: payload.task_description,\n      onChange: event => this.handleChange(\"payload.task_description\")(event.target.value)\n    }))))), __jsx(\"div\", {\n      className: \"panel-flex-container\"\n    }, __jsx(Panel, {\n      icon: \"icon-history\",\n      border: \"primary\",\n      title: \"Task List\",\n      loading: loading,\n      icon: \"icon-list2\"\n    }, __jsx(\"ul\", {\n      className: \"task-ul\"\n    }, loaded && !loading && !!data.length && data.map((task, i) => {\n      if (task.completed == \"N\") {\n        let deletePayload = {\n          task_id: task.task_id,\n          update: id => {\n            this.setState({\n              data: this.state.data.filter(task => task.task_id !== id)\n            });\n          }\n        };\n        return __jsx(\"div\", {\n          className: \"task-section\",\n          key: i\n        }, __jsx(\"div\", {\n          style: {\n            display: \"flex\",\n            justifyContent: \"space-between\"\n          }\n        }, __jsx(\"li\", {\n          className: \"task-results-list\"\n        }, __jsx(\"strong\", null, \" \", task.task_title)), __jsx(\"div\", {\n          className: \"btn-div\"\n        }, __jsx(\"i\", {\n          className: \"btn-icons icon-circle\",\n          onClick: () => this.updateComplete(task.task_id)\n        }), __jsx(\"i\", {\n          onClick: this.handleDeleteForm,\n          className: \"btn-icons fa fa-trash\",\n          disabled: loading,\n          onClick: loading ? noop : () => this.props.openDelete(deletePayload)\n        }))), __jsx(\"div\", {\n          className: \"task-info-div \" + (!task.due_date ? \"hidden\" : \"\")\n        }, __jsx(\"span\", {\n          className: \"task-details-title\"\n        }, \"Due Date\"), __jsx(\"i\", {\n          className: \"fa fa-caret-right\"\n        }), __jsx(\"span\", {\n          className: \"task-details\"\n        }, task.due_date)), __jsx(\"div\", {\n          className: \"task-info-div \" + (!task.task_description ? \"hidden\" : \"\")\n        }, __jsx(\"span\", {\n          className: \"task-details-title\"\n        }, \"Description\"), __jsx(\"i\", {\n          className: \"fa fa-caret-right\"\n        }), __jsx(\"span\", {\n          className: \"task-details\"\n        }, task.task_description)));\n      }\n    }))), __jsx(Panel, {\n      icon: \"icon-history\",\n      border: \"primary\",\n      title: \"Completed\",\n      loading: loading,\n      icon: \"fa fa-check-square-o\"\n    }, __jsx(\"ul\", {\n      className: \"task-ul\"\n    }, loaded && !loading && !!data.length && data.map((task, i) => {\n      if (task.completed == \"Y\") {\n        return __jsx(\"div\", {\n          className: \"task-section\",\n          key: i\n        }, __jsx(\"div\", {\n          style: {\n            display: \"flex\",\n            justifyContent: \"space-between\"\n          }\n        }, __jsx(\"li\", {\n          className: \"task-results-list line-through\"\n        }, __jsx(\"strong\", null, \" \", task.task_title)), __jsx(\"div\", {\n          className: \"btn-div\"\n        }, __jsx(\"i\", {\n          className: \"icon-checkmark-circle\"\n        }))), __jsx(\"div\", {\n          className: \"task-info-div \" + (!task.due_date ? \"hidden\" : \"\")\n        }, __jsx(\"span\", {\n          className: \"task-details-title line-through\"\n        }, \"Due Date\"), __jsx(\"i\", {\n          className: \"fa fa-caret-right\"\n        }), __jsx(\"span\", {\n          className: \"task-details\"\n        }, task.due_date)), __jsx(\"div\", {\n          className: \"task-info-div \" + (!task.task_description ? \"hidden\" : \"\")\n        }, __jsx(\"span\", {\n          className: \"task-details-title line-through\"\n        }, \"Description\"), __jsx(\"i\", {\n          className: \"fa fa-caret-right\"\n        }), __jsx(\"span\", {\n          className: \"task-details\"\n        }, task.task_description)));\n      }\n    })))));\n  }\n\n}) || _class);\nexport default Dashboard;","map":null,"metadata":{},"sourceType":"module"}