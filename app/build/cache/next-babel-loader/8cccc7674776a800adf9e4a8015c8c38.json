{"ast":null,"code":"var _dec, _class;\n\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport qs from \"querystring\";\nimport { connect } from \"react-redux\";\nimport { autobind } from \"react-decoration\";\nimport Link from \"next/link\";\nimport Router from \"next/router\";\nimport { withRouter } from \"next/router\";\nimport Modal from \"components/Modal\";\nimport ReactImages from \"components/ReactImages\";\nimport Sidebar from \"components/ReactSidebar\";\nimport { pathToRegexp } from \"path-to-regexp\";\nimport pages from \"constants/pages\";\nimport { action } from \"modules\";\nimport * as api from \"api\";\nimport css from \"./Main.module.scss\";\nimport TokenService from \"../../services/token-service\";\nimport IdleService from \"../../services/idle-service\";\nconst ignorePaths = [\"/demo\", \"/register\"];\nlet Main = (_dec = connect(), withRouter(_class = _dec(_class = class Main extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      loaded: false,\n      sidebar: false\n    });\n\n    _defineProperty(this, \"logout\", () => {\n      TokenService.clearAuthToken();\n      TokenService.clearCallbackBeforeExpiry();\n      IdleService.unRegisterIdleResets();\n      return Router.replace(\"/\");\n    });\n\n    _defineProperty(this, \"isCurrentDirectory\", page => {\n      const pathname = this.props.router.pathname;\n      return page.page && pathToRegexp(page.page).exec(pathname);\n    });\n\n    _defineProperty(this, \"getCurrentPage\", () => {\n      const _pages = pages.sidebar;\n      const pathname = this.props.router.pathname;\n\n      for (const page of _pages.filter(item => typeof item !== \"string\")) {\n        if (page.page && pathToRegexp(page.page).exec(pathname)) return page;\n\n        if (page.menu) {\n          for (const item of page.menu) {\n            if (pathToRegexp(item.page).exec(pathname)) return item;\n          }\n        }\n\n        if (page.sub_pages) {\n          for (const item of page.sub_pages) {\n            if (pathToRegexp(item.page).exec(pathname)) return item;\n          }\n        }\n      }\n    });\n\n    _defineProperty(this, \"getSidebar\", () => {\n      let sidebar = JSON.parse(JSON.stringify(pages.sidebar)); // if (process.env.NEXT_PUBLIC_PERMISSION_ENABLED !== \"true\")\n      // \treturn sidebar;\n\n      const user = this.props.user;\n      const polices = (user === null || user === void 0 ? void 0 : user.permissions) || [];\n      sidebar = sidebar.map(page => {\n        if (page.type == \"dropdown\") {\n          page.menu = page.menu.filter(page => {\n            if (page.permissions && page.permissions.length > 0) {\n              return page.permissions.every(permission => polices.includes(permission));\n            }\n\n            return true;\n          });\n        }\n\n        return page;\n      }).filter(page => {\n        if (page.type == \"dropdown\") {\n          return page.menu.length > 0;\n        } else if (page.permissions && page.permissions.length > 0) {\n          return page.permissions.every(permission => polices.includes(permission));\n        }\n\n        return true;\n      });\n      return sidebar;\n    });\n\n    _defineProperty(this, \"renderSidebar\", () => {\n      return __jsx(React.Fragment, null, __jsx(\"ul\", {\n        className: css[\"sidebar-list-narrow\"]\n      }, this.getSidebar().map((item, index) => {\n        if (typeof item == \"string\") return __jsx(React.Fragment, {\n          key: index\n        });\n\n        if (item.type == \"dropdown\") {\n          var _item$menu;\n\n          return __jsx(\"li\", {\n            key: index,\n            className: css[\"dropdown-narrow\"]\n          }, __jsx(\"a\", null, __jsx(\"i\", {\n            className: item.icon\n          })), __jsx(\"ul\", {\n            className: css[\"sidebar-list\"]\n          }, ((_item$menu = item.menu) !== null && _item$menu !== void 0 ? _item$menu : []).map((item, index) => __jsx(\"li\", {\n            key: index,\n            className: this.isCurrentDirectory(item) ? css[\"active-item\"] : void 0\n          }, __jsx(Link, {\n            href: item.page\n          }, __jsx(\"a\", null, __jsx(\"i\", {\n            className: item.icon\n          }), __jsx(\"span\", null, item.name)))))));\n        }\n\n        return __jsx(\"li\", {\n          key: index,\n          className: this.isCurrentDirectory(item) ? css[\"active-item\"] : void 0\n        }, __jsx(Link, {\n          href: item.page\n        }, __jsx(\"a\", null, __jsx(\"i\", {\n          className: item.icon\n        }))));\n      })), __jsx(\"ul\", {\n        className: css[\"sidebar-list-narrow\"]\n      }, __jsx(\"li\", {\n        onClick: this.logout\n      }, __jsx(\"a\", null, __jsx(\"i\", {\n        className: \"fa fa-sign-out\"\n      })))));\n    });\n\n    _defineProperty(this, \"renderFullSidebar\", () => {\n      return __jsx(React.Fragment, null, __jsx(\"ul\", {\n        className: css[\"sidebar-list\"]\n      }, this.getSidebar().map((item, index) => {\n        if (typeof item == \"string\") return __jsx(\"li\", {\n          key: index,\n          className: css.catalog\n        }, __jsx(\"span\", null, item));\n\n        if (item.type == \"dropdown\") {\n          var _item$menu2;\n\n          return __jsx(\"li\", {\n            key: index,\n            className: css.dropdown\n          }, __jsx(\"a\", null, __jsx(\"span\", null, __jsx(\"i\", {\n            className: item.icon\n          }), __jsx(\"span\", null, item.name)), __jsx(\"i\", {\n            className: \"fa fa-angle-right\"\n          })), __jsx(\"ul\", {\n            className: css[\"sidebar-list\"]\n          }, ((_item$menu2 = item.menu) !== null && _item$menu2 !== void 0 ? _item$menu2 : []).map((item, index) => __jsx(\"li\", {\n            key: index,\n            className: this.isCurrentDirectory(item) ? css[\"active-item\"] : void 0\n          }, __jsx(Link, {\n            href: item.page\n          }, __jsx(\"a\", null, __jsx(\"i\", {\n            className: item.icon\n          }), __jsx(\"span\", null, item.name)))))));\n        }\n\n        return __jsx(\"li\", {\n          key: index,\n          className: this.isCurrentDirectory(item) ? css[\"active-item\"] : void 0\n        }, __jsx(Link, {\n          href: item.page\n        }, __jsx(\"a\", null, __jsx(\"i\", {\n          className: item.icon\n        }), __jsx(\"span\", null, item.name))));\n      })), __jsx(\"ul\", {\n        className: css[\"sidebar-list\"]\n      }, __jsx(\"li\", {\n        onClick: this.logout\n      }, __jsx(\"a\", null, __jsx(\"i\", {\n        className: \"fa fa-sign-out\"\n      }), __jsx(\"span\", null, \"Sign out\")))));\n    });\n\n    _defineProperty(this, \"renderContent\", () => {\n      const {\n        sidebar\n      } = this.state;\n      const {\n        pathname\n      } = this.props.router;\n\n      if ([\"/\", \"/login\", \"/demo\", \"/register\"].includes(pathname)) {\n        return this.props.children;\n      }\n\n      const currentPage = this.getCurrentPage();\n      return __jsx(React.Fragment, null, __jsx(\"nav\", {\n        className: css.navbar\n      }, __jsx(\"div\", {\n        className: css[sidebar ? \"navbar-header\" : \"navbar-header-narrow\"]\n      }), __jsx(\"div\", {\n        className: css[\"navbar-main\"],\n        onClick: () => this.setState({\n          sidebar: !sidebar\n        })\n      }, __jsx(\"i\", {\n        className: \"fa fa-align-left pointer\"\n      }), __jsx(\"h3\", null, currentPage === null || currentPage === void 0 ? void 0 : currentPage.name))), __jsx(\"div\", {\n        className: css[sidebar ? \"page-container\" : \"page-container-narrow\"] + \" error-page\"\n      }, __jsx(\"aside\", {\n        className: sidebar ? css.sidebar : css[\"sidebar-narrow\"]\n      }, sidebar ? this.renderFullSidebar() : this.renderSidebar()), __jsx(\"div\", {\n        className: css[\"page-content\"]\n      }, this.props.children)));\n    });\n  }\n\n  render() {\n    const {\n      loaded\n    } = this.state;\n    const pathname = this.props.router.pathname;\n    if (ignorePaths.includes(pathname)) return this.renderContent();\n    return __jsx(React.Fragment, null, __jsx(Sidebar, null, this.renderContent()), __jsx(Modal, null), __jsx(ReactImages, null));\n  }\n\n}) || _class) || _class);\nexport default Main;","map":null,"metadata":{},"sourceType":"module"}